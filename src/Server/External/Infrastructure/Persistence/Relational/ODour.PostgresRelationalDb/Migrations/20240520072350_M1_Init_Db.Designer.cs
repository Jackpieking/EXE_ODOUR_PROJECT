// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using ODour.PostgresRelationalDb.Data;

#nullable disable

namespace ODour.PostgresRelationalDb.Migrations
{
    [DbContext(typeof(ODourContext))]
    [Migration("20240520072350_M1_Init_Db")]
    partial class M1_Init_Db
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:CollationDefinition:case_insensitive", "en-u-ks-primary,en-u-ks-primary,icu,False")
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("character varying(34)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("RoleClaims", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRoleClaim<Guid>");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("character varying(34)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("UserClaims", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserClaim<Guid>");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("character varying(34)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.ToTable("UserLogins", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserLogin<Guid>");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("character varying(34)");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserRole<Guid>");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("character varying(34)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserToken<Guid>");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("ODour.Domain.Share.Entities.AccountStatusEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("RemovedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<Guid>("RemovedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("RemovedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("AccountStatuses", null, t =>
                        {
                            t.HasComment("Contain account statuses.");
                        });
                });

            modelBuilder.Entity("ODour.Domain.Share.Entities.CategoryEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("RemovedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<Guid>("RemovedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("RemovedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Categories", null, t =>
                        {
                            t.HasComment("Contain categories.");
                        });
                });

            modelBuilder.Entity("ODour.Domain.Share.Entities.OrderEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("DeliveredAddress")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("DeliveredAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<long>("OrderCode")
                        .HasColumnType("bigint");

                    b.Property<string>("OrderNote")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid>("OrderStatusId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PaymentMethodId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("TotalPrice")
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric(12,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("OrderStatusId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Orders", null, t =>
                        {
                            t.HasComment("Contain orders.");
                        });
                });

            modelBuilder.Entity("ODour.Domain.Share.Entities.OrderItemEntity", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("SellingPrice")
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric(12,2)");

                    b.Property<int>("SellingQuantity")
                        .HasColumnType("integer");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems", null, t =>
                        {
                            t.HasComment("Contain order items.");
                        });
                });

            modelBuilder.Entity("ODour.Domain.Share.Entities.OrderStatusEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("RemovedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<Guid>("RemovedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("RemovedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("OrderStatuses", null, t =>
                        {
                            t.HasComment("Contain order statuses.");
                        });
                });

            modelBuilder.Entity("ODour.Domain.Share.Entities.PaymentMethodEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("RemovedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<Guid>("RemovedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("RemovedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("PaymentMethods", null, t =>
                        {
                            t.HasComment("Contain payment methods.");
                        });
                });

            modelBuilder.Entity("ODour.Domain.Share.Entities.ProductEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid>("ProductStatusId")
                        .HasColumnType("uuid");

                    b.Property<int>("QuantityInStock")
                        .HasColumnType("integer");

                    b.Property<DateTime>("RemovedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<Guid>("RemovedBy")
                        .HasColumnType("uuid");

                    b.Property<decimal>("UnitPrice")
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric(12,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ProductStatusId");

                    b.HasIndex("RemovedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Products", null, t =>
                        {
                            t.HasComment("Contain products.");
                        });
                });

            modelBuilder.Entity("ODour.Domain.Share.Entities.ProductImageEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<string>("StorageUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UploadOrder")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages", null, t =>
                        {
                            t.HasComment("Contain product images.");
                        });
                });

            modelBuilder.Entity("ODour.Domain.Share.Entities.ProductStatusEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("RemovedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<Guid>("RemovedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("RemovedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("ProductStatuses", null, t =>
                        {
                            t.HasComment("Contain product statuses.");
                        });
                });

            modelBuilder.Entity("ODour.Domain.Share.Entities.RoleDetailEntity", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("RemovedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<Guid>("RemovedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("RoleId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("RemovedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("RoleDetails", null, t =>
                        {
                            t.HasComment("Contain role details.");
                        });
                });

            modelBuilder.Entity("ODour.Domain.Share.Entities.RoleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("ODour.Domain.Share.Entities.SystemAccountEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<Guid>("AccountStatusId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("NormalizedUserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("AccountStatusId");

                    b.ToTable("SystemAccounts", null, t =>
                        {
                            t.HasComment("Contain system accounts.");
                        });
                });

            modelBuilder.Entity("ODour.Domain.Share.Entities.SystemAccountTokenEntity", b =>
                {
                    b.Property<Guid>("SystemAccountId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExpiredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("SystemAccountId");

                    b.ToTable("SystemAccountTokens", null, t =>
                        {
                            t.HasComment("Contain system account tokens.");
                        });
                });

            modelBuilder.Entity("ODour.Domain.Share.Entities.UserDetailEntity", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccountStatusId")
                        .HasColumnType("uuid");

                    b.Property<string>("AvatarUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("Gender")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("RemovedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<Guid>("RemovedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.HasKey("UserId");

                    b.HasIndex("AccountStatusId");

                    b.HasIndex("RemovedBy");

                    b.ToTable("UserDetails", null, t =>
                        {
                            t.HasComment("Contain user details.");
                        });
                });

            modelBuilder.Entity("ODour.Domain.Share.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Users", null, t =>
                        {
                            t.HasComment("Contain users.");
                        });
                });

            modelBuilder.Entity("ODour.Domain.Share.Entities.RoleClaimEntity", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", null, t =>
                        {
                            t.HasComment("Contain role claims.");
                        });

                    b.HasDiscriminator().HasValue("RoleClaimEntity");
                });

            modelBuilder.Entity("ODour.Domain.Share.Entities.UserClaimEntity", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", null, t =>
                        {
                            t.HasComment("Contain user claims.");
                        });

                    b.HasDiscriminator().HasValue("UserClaimEntity");
                });

            modelBuilder.Entity("ODour.Domain.Share.Entities.UserLoginEntity", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", null, t =>
                        {
                            t.HasComment("Contain user logins.");
                        });

                    b.HasDiscriminator().HasValue("UserLoginEntity");
                });

            modelBuilder.Entity("ODour.Domain.Share.Entities.UserRoleEntity", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", null, t =>
                        {
                            t.HasComment("Contain user roles.");
                        });

                    b.HasDiscriminator().HasValue("UserRoleEntity");
                });

            modelBuilder.Entity("ODour.Domain.Share.Entities.UserTokenEntity", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.Property<DateTime>("ExpiredAt")
                        .HasColumnType("TIMESTAMPTZ");

                    b.ToTable("UserTokens", null, t =>
                        {
                            t.HasComment("Contain user tokens.");
                        });

                    b.HasDiscriminator().HasValue("UserTokenEntity");
                });

            modelBuilder.Entity("ODour.Domain.Share.Entities.AccountStatusEntity", b =>
                {
                    b.HasOne("ODour.Domain.Share.Entities.SystemAccountEntity", "Creator")
                        .WithMany("AccountStatusCreators")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ODour.Domain.Share.Entities.SystemAccountEntity", "Remover")
                        .WithMany("AccountStatusRemovers")
                        .HasForeignKey("RemovedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ODour.Domain.Share.Entities.SystemAccountEntity", "Updater")
                        .WithMany("AccountStatusUpdaters")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Remover");

                    b.Navigation("Updater");
                });

            modelBuilder.Entity("ODour.Domain.Share.Entities.CategoryEntity", b =>
                {
                    b.HasOne("ODour.Domain.Share.Entities.SystemAccountEntity", "Creator")
                        .WithMany("CategoryCreators")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ODour.Domain.Share.Entities.SystemAccountEntity", "Remover")
                        .WithMany("CategoryRemovers")
                        .HasForeignKey("RemovedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ODour.Domain.Share.Entities.SystemAccountEntity", "Updater")
                        .WithMany("CategoryUpdaters")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Remover");

                    b.Navigation("Updater");
                });

            modelBuilder.Entity("ODour.Domain.Share.Entities.OrderEntity", b =>
                {
                    b.HasOne("ODour.Domain.Share.Entities.UserDetailEntity", "Creator")
                        .WithMany("OrderCreators")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ODour.Domain.Share.Entities.OrderStatusEntity", "OrderStatus")
                        .WithMany("Orders")
                        .HasForeignKey("OrderStatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ODour.Domain.Share.Entities.PaymentMethodEntity", "PaymentMethod")
                        .WithMany("Orders")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ODour.Domain.Share.Entities.UserDetailEntity", "Updater")
                        .WithMany("OrderUpdaters")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("OrderStatus");

                    b.Navigation("PaymentMethod");

                    b.Navigation("Updater");
                });

            modelBuilder.Entity("ODour.Domain.Share.Entities.OrderItemEntity", b =>
                {
                    b.HasOne("ODour.Domain.Share.Entities.OrderEntity", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ODour.Domain.Share.Entities.ProductEntity", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ODour.Domain.Share.Entities.OrderStatusEntity", b =>
                {
                    b.HasOne("ODour.Domain.Share.Entities.SystemAccountEntity", "Creator")
                        .WithMany("OrderStatusCreators")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ODour.Domain.Share.Entities.SystemAccountEntity", "Remover")
                        .WithMany("OrderStatusRemovers")
                        .HasForeignKey("RemovedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ODour.Domain.Share.Entities.SystemAccountEntity", "Updater")
                        .WithMany("OrderStatusUpdaters")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Remover");

                    b.Navigation("Updater");
                });

            modelBuilder.Entity("ODour.Domain.Share.Entities.PaymentMethodEntity", b =>
                {
                    b.HasOne("ODour.Domain.Share.Entities.SystemAccountEntity", "Creator")
                        .WithMany("PaymentMethodCreators")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ODour.Domain.Share.Entities.SystemAccountEntity", "Remover")
                        .WithMany("PaymentMethodRemovers")
                        .HasForeignKey("RemovedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ODour.Domain.Share.Entities.SystemAccountEntity", "Updater")
                        .WithMany("PaymentMethodUpdaters")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Remover");

                    b.Navigation("Updater");
                });

            modelBuilder.Entity("ODour.Domain.Share.Entities.ProductEntity", b =>
                {
                    b.HasOne("ODour.Domain.Share.Entities.CategoryEntity", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ODour.Domain.Share.Entities.SystemAccountEntity", "Creator")
                        .WithMany("ProductCreators")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ODour.Domain.Share.Entities.ProductStatusEntity", "ProductStatus")
                        .WithMany("Products")
                        .HasForeignKey("ProductStatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ODour.Domain.Share.Entities.SystemAccountEntity", "Remover")
                        .WithMany("ProductRemovers")
                        .HasForeignKey("RemovedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ODour.Domain.Share.Entities.SystemAccountEntity", "Updater")
                        .WithMany("ProductUpdaters")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Creator");

                    b.Navigation("ProductStatus");

                    b.Navigation("Remover");

                    b.Navigation("Updater");
                });

            modelBuilder.Entity("ODour.Domain.Share.Entities.ProductImageEntity", b =>
                {
                    b.HasOne("ODour.Domain.Share.Entities.ProductEntity", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ODour.Domain.Share.Entities.ProductStatusEntity", b =>
                {
                    b.HasOne("ODour.Domain.Share.Entities.SystemAccountEntity", "Creator")
                        .WithMany("ProductStatusCreators")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ODour.Domain.Share.Entities.SystemAccountEntity", "Remover")
                        .WithMany("ProductStatusRemovers")
                        .HasForeignKey("RemovedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ODour.Domain.Share.Entities.SystemAccountEntity", "Updater")
                        .WithMany("ProductStatusUpdaters")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Remover");

                    b.Navigation("Updater");
                });

            modelBuilder.Entity("ODour.Domain.Share.Entities.RoleDetailEntity", b =>
                {
                    b.HasOne("ODour.Domain.Share.Entities.SystemAccountEntity", "Creator")
                        .WithMany("RoleDetailCreators")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ODour.Domain.Share.Entities.SystemAccountEntity", "Remover")
                        .WithMany("RoleDetailRemovers")
                        .HasForeignKey("RemovedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ODour.Domain.Share.Entities.RoleEntity", "Role")
                        .WithOne("RoleDetail")
                        .HasForeignKey("ODour.Domain.Share.Entities.RoleDetailEntity", "RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ODour.Domain.Share.Entities.SystemAccountEntity", "Updater")
                        .WithMany("RoleDetailUpdaters")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Remover");

                    b.Navigation("Role");

                    b.Navigation("Updater");
                });

            modelBuilder.Entity("ODour.Domain.Share.Entities.SystemAccountEntity", b =>
                {
                    b.HasOne("ODour.Domain.Share.Entities.AccountStatusEntity", "AccountStatus")
                        .WithMany("SystemAccounts")
                        .HasForeignKey("AccountStatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AccountStatus");
                });

            modelBuilder.Entity("ODour.Domain.Share.Entities.SystemAccountTokenEntity", b =>
                {
                    b.HasOne("ODour.Domain.Share.Entities.SystemAccountEntity", "SystemAccount")
                        .WithMany("SystemAccountTokens")
                        .HasForeignKey("SystemAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("SystemAccount");
                });

            modelBuilder.Entity("ODour.Domain.Share.Entities.UserDetailEntity", b =>
                {
                    b.HasOne("ODour.Domain.Share.Entities.AccountStatusEntity", "AccountStatus")
                        .WithMany("UserDetails")
                        .HasForeignKey("AccountStatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ODour.Domain.Share.Entities.SystemAccountEntity", "Remover")
                        .WithMany("UserDetailRemovers")
                        .HasForeignKey("RemovedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ODour.Domain.Share.Entities.UserEntity", "User")
                        .WithOne("UserDetail")
                        .HasForeignKey("ODour.Domain.Share.Entities.UserDetailEntity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountStatus");

                    b.Navigation("Remover");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ODour.Domain.Share.Entities.RoleClaimEntity", b =>
                {
                    b.HasOne("ODour.Domain.Share.Entities.RoleEntity", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ODour.Domain.Share.Entities.UserClaimEntity", b =>
                {
                    b.HasOne("ODour.Domain.Share.Entities.UserEntity", "User")
                        .WithMany("UserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ODour.Domain.Share.Entities.UserLoginEntity", b =>
                {
                    b.HasOne("ODour.Domain.Share.Entities.UserEntity", "User")
                        .WithMany("UserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ODour.Domain.Share.Entities.UserRoleEntity", b =>
                {
                    b.HasOne("ODour.Domain.Share.Entities.RoleEntity", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ODour.Domain.Share.Entities.UserEntity", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ODour.Domain.Share.Entities.UserTokenEntity", b =>
                {
                    b.HasOne("ODour.Domain.Share.Entities.UserEntity", "User")
                        .WithMany("UserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ODour.Domain.Share.Entities.AccountStatusEntity", b =>
                {
                    b.Navigation("SystemAccounts");

                    b.Navigation("UserDetails");
                });

            modelBuilder.Entity("ODour.Domain.Share.Entities.CategoryEntity", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ODour.Domain.Share.Entities.OrderEntity", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("ODour.Domain.Share.Entities.OrderStatusEntity", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("ODour.Domain.Share.Entities.PaymentMethodEntity", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("ODour.Domain.Share.Entities.ProductEntity", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("ProductImages");
                });

            modelBuilder.Entity("ODour.Domain.Share.Entities.ProductStatusEntity", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ODour.Domain.Share.Entities.RoleEntity", b =>
                {
                    b.Navigation("RoleClaims");

                    b.Navigation("RoleDetail");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("ODour.Domain.Share.Entities.SystemAccountEntity", b =>
                {
                    b.Navigation("AccountStatusCreators");

                    b.Navigation("AccountStatusRemovers");

                    b.Navigation("AccountStatusUpdaters");

                    b.Navigation("CategoryCreators");

                    b.Navigation("CategoryRemovers");

                    b.Navigation("CategoryUpdaters");

                    b.Navigation("OrderStatusCreators");

                    b.Navigation("OrderStatusRemovers");

                    b.Navigation("OrderStatusUpdaters");

                    b.Navigation("PaymentMethodCreators");

                    b.Navigation("PaymentMethodRemovers");

                    b.Navigation("PaymentMethodUpdaters");

                    b.Navigation("ProductCreators");

                    b.Navigation("ProductRemovers");

                    b.Navigation("ProductStatusCreators");

                    b.Navigation("ProductStatusRemovers");

                    b.Navigation("ProductStatusUpdaters");

                    b.Navigation("ProductUpdaters");

                    b.Navigation("RoleDetailCreators");

                    b.Navigation("RoleDetailRemovers");

                    b.Navigation("RoleDetailUpdaters");

                    b.Navigation("SystemAccountTokens");

                    b.Navigation("UserDetailRemovers");
                });

            modelBuilder.Entity("ODour.Domain.Share.Entities.UserDetailEntity", b =>
                {
                    b.Navigation("OrderCreators");

                    b.Navigation("OrderUpdaters");
                });

            modelBuilder.Entity("ODour.Domain.Share.Entities.UserEntity", b =>
                {
                    b.Navigation("UserClaims");

                    b.Navigation("UserDetail");

                    b.Navigation("UserLogins");

                    b.Navigation("UserRoles");

                    b.Navigation("UserTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
